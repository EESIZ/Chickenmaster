digraph ImportGraph {
    rankdir=TB;
    node [shape=box, style=filled, fontname="Arial"];
    edge [fontname="Arial"];

    "src.core.domain.cascade" [fillcolor="#DDA0DD"];
    "src.events.schema" [fillcolor="#87CEEB"];
    "tests.test_placeholder" [fillcolor="#F0F0F0"];
    "backend.tests.unit.test_story_pattern" [fillcolor="#90EE90"];
    "src.storyteller.domain.strategy_factory" [fillcolor="#87CEEB"];
    "dev_tools" [fillcolor="#F0F0F0"];
    "chicken_mud_game" [fillcolor="#F0F0F0"];
    "tests.cascade.test_adapters" [fillcolor="#F0F0F0"];
    "src.economy.engine" [fillcolor="#87CEEB"];
    "src.core.domain.research" [fillcolor="#DDA0DD"];
    "src.adapters" [fillcolor="#87CEEB"];
    "src.core.ports" [fillcolor="#DDA0DD"];
    "src.events.constants" [fillcolor="#87CEEB"];
    "tests.test_event_generator_validator" [fillcolor="#F0F0F0"];
    "web_prototype.dialogue_manager" [fillcolor="#FF6B35"];
    "backend.tests.unit.test_game_initializer" [fillcolor="#90EE90"];
    "src.core.ports.metric_port" [fillcolor="#DDA0DD"];
    "src.storyteller.domain.strategies" [fillcolor="#87CEEB"];
    "src.cascade.domain" [fillcolor="#87CEEB"];
    "src.adapters.storage" [fillcolor="#87CEEB"];
    "dev_tools.config" [fillcolor="#F0F0F0"];
    "src.core.domain.game_state" [fillcolor="#DDA0DD"];
    "src.metrics" [fillcolor="#87CEEB"];
    "chicken_debug_mud" [fillcolor="#F0F0F0"];
    "src.core" [fillcolor="#DDA0DD"];
    "src.storyteller" [fillcolor="#87CEEB"];
    "src.cascade.ports.cascade_port" [fillcolor="#87CEEB"];
    "src.core.ports.cascade_port" [fillcolor="#DDA0DD"];
    "test_strategy_debug" [fillcolor="#F0F0F0"];
    "src.core.domain.cascade.models" [fillcolor="#DDA0DD"];
    "backend.app.core.domain.story_pattern" [fillcolor="#90EE90"];
    "backend.app.core.domain.metrics" [fillcolor="#90EE90"];
    "src.events.validators.base" [fillcolor="#87CEEB"];
    "tests.test_balance_simulator" [fillcolor="#F0F0F0"];
    "web_prototype.create_placeholder_images" [fillcolor="#FF6B35"];
    "src.adapters.services.cascade_service" [fillcolor="#87CEEB"];
    "dev_tools.event_structure_converter" [fillcolor="#F0F0F0"];
    "tests.core.domain.cascade.test_models" [fillcolor="#F0F0F0"];
    "test_research_module" [fillcolor="#F0F0F0"];
    "src.cascade.adapters.cascade_service" [fillcolor="#87CEEB"];
    "core.adapters.excel_constants_provider" [fillcolor="#F0F0F0"];
    "backend.app.core.domain.game_initializer" [fillcolor="#90EE90"];
    "src.core.domain.action_slots" [fillcolor="#DDA0DD"];
    "src.cascade.domain.strategies.social_cascade_strategy" [fillcolor="#87CEEB"];
    "tests.test_tradeoff_example" [fillcolor="#F0F0F0"];
    "src.cascade.adapters" [fillcolor="#87CEEB"];
    "src.core.ports.container_port" [fillcolor="#DDA0DD"];
    "src.cascade.ports.event_port" [fillcolor="#87CEEB"];
    "tests.test_events" [fillcolor="#F0F0F0"];
    "src.events.models" [fillcolor="#87CEEB"];
    "src.events.engine" [fillcolor="#87CEEB"];
    "backend.app.core.domain.interfaces" [fillcolor="#90EE90"];
    "backend.app.services.metrics_tracker" [fillcolor="#90EE90"];
    "src.research" [fillcolor="#87CEEB"];
    "src.cascade.domain.strategies.economic_cascade_strategy" [fillcolor="#87CEEB"];
    "src.cascade.ports" [fillcolor="#87CEEB"];
    "src.events" [fillcolor="#87CEEB"];
    "src.cascade.domain.strategies.strategy_factory" [fillcolor="#87CEEB"];
    "tests.test_event_tools" [fillcolor="#F0F0F0"];
    "src.research.facade" [fillcolor="#87CEEB"];
    "dev_tools.balance_simulator" [fillcolor="#F0F0F0"];
    "src.adapters.research_adapter" [fillcolor="#87CEEB"];
    "dev_tools.event_bank_indexer" [fillcolor="#F0F0F0"];
    "src.events.integration" [fillcolor="#87CEEB"];
    "dev_tools.event_generator" [fillcolor="#F0F0F0"];
    "install_reqs" [fillcolor="#F0F0F0"];
    "backend.tests.unit.test_game_state" [fillcolor="#90EE90"];
    "src.core.ports.storage_port" [fillcolor="#DDA0DD"];
    "backend.tests.unit.test_story_context" [fillcolor="#90EE90"];
    "src.core.ports.event_port" [fillcolor="#DDA0DD"];
    "backend.tests.unit.test_event_system" [fillcolor="#90EE90"];
    "backend.app.core.game_constants" [fillcolor="#90EE90"];
    "src.adapters.services" [fillcolor="#87CEEB"];
    "tests.test_economy" [fillcolor="#F0F0F0"];
    "scripts.create_constants_template" [fillcolor="#F0F0F0"];
    "web_prototype.main" [fillcolor="#FF6B35"];
    "game_constants" [fillcolor="#FFD700"];
    "src.cascade.domain.strategies.cultural_cascade_strategy" [fillcolor="#87CEEB"];
    "src.core.domain" [fillcolor="#DDA0DD"];
    "debug_tracing_system" [fillcolor="#F0F0F0"];
    "src.metrics.tracker" [fillcolor="#87CEEB"];
    "dev_tools.event_validator" [fillcolor="#F0F0F0"];
    "test_strategy_patterns" [fillcolor="#F0F0F0"];
    "tests.adapters.services.test_cascade_service" [fillcolor="#F0F0F0"];
    "src.cascade.domain.strategies.technological_cascade_strategy" [fillcolor="#87CEEB"];
    "backend.tests.unit.test_metrics_tracker" [fillcolor="#90EE90"];
    "src.cascade.domain.strategies.environmental_cascade_strategy" [fillcolor="#87CEEB"];
    "src.cascade.domain.strategies.cascade_strategy" [fillcolor="#87CEEB"];
    "backend.app.core.domain.narrative_response" [fillcolor="#90EE90"];
    "src.cascade.domain.models" [fillcolor="#87CEEB"];
    "src.application.research_service" [fillcolor="#87CEEB"];
    "backend.app.core.domain.variable_registry" [fillcolor="#90EE90"];
    "src.economy" [fillcolor="#87CEEB"];
    "src.storyteller.adapters.storyteller_service" [fillcolor="#87CEEB"];
    "tests.conftest" [fillcolor="#F0F0F0"];
    "tests.test_metrics" [fillcolor="#F0F0F0"];
    "backend.app.core.domain.story_context" [fillcolor="#90EE90"];
    "tests.test_storyteller_service" [fillcolor="#F0F0F0"];
    "backend.app.core.domain.event_system" [fillcolor="#90EE90"];
    "backend.app.core.domain.game_state" [fillcolor="#90EE90"];
    "test_mud_integration" [fillcolor="#F0F0F0"];
    "examples.constants_usage_example" [fillcolor="#F0F0F0"];
    "backend.tests.unit.test_narrative_response" [fillcolor="#90EE90"];
    "analyze_imports" [fillcolor="#F0F0F0"];
    "dev_tools.event_bank_manager" [fillcolor="#F0F0F0"];
    "src.cascade.adapters.event_adapter" [fillcolor="#87CEEB"];
    "src.metrics.modifiers" [fillcolor="#87CEEB"];
    "src.core.domain.metrics" [fillcolor="#DDA0DD"];
    "scripts.validate_architecture" [fillcolor="#F0F0F0"];
    "src.research.factory" [fillcolor="#87CEEB"];
    "install_reqs_dev" [fillcolor="#F0F0F0"];
    "backend.app.core.domain.interfaces.data_provider" [fillcolor="#90EE90"];
    "tests.cascade.test_domain" [fillcolor="#F0F0F0"];
    "src.application.game_philosophy_service" [fillcolor="#87CEEB"];
    "src.events.validators.specific" [fillcolor="#87CEEB"];
    "src.application" [fillcolor="#87CEEB"];
    "src.core.domain.metrics_repository" [fillcolor="#DDA0DD"];
    "analyze_codebase" [fillcolor="#F0F0F0"];
    "tests.test_storyteller_edge_cases" [fillcolor="#F0F0F0"];
    "src.storyteller.ports.storyteller_port" [fillcolor="#87CEEB"];
    "src" [fillcolor="#87CEEB"];
    "src.storyteller.domain.models" [fillcolor="#87CEEB"];
    "scripts.mass_event_generation" [fillcolor="#F0F0F0"];
    "backend.app.adapters" [fillcolor="#90EE90"];
    "backend.app.adapters.excel_data_provider" [fillcolor="#90EE90"];
    "src.economy.models" [fillcolor="#87CEEB"];
    "src.core.adapters.container_service" [fillcolor="#DDA0DD"];
    "src.core.ports.research_port" [fillcolor="#DDA0DD"];
    "dev_tools.event_condition_fixer" [fillcolor="#F0F0F0"];
    "src.core.domain.events" [fillcolor="#DDA0DD"];

    "chicken_debug_mud" -> "src.core";
    "chicken_debug_mud" -> "src.core.domain.metrics";
    "chicken_debug_mud" -> "src.core.domain.game_state";
    "chicken_debug_mud" -> "src";
    "chicken_debug_mud" -> "game_constants";
    "chicken_debug_mud" -> "src.core.domain.action_slots";
    "chicken_debug_mud" -> "src.application.game_philosophy_service";
    "chicken_debug_mud" -> "src.core.domain";
    "chicken_debug_mud" -> "src.application";
    "chicken_mud_game" -> "src.core";
    "chicken_mud_game" -> "src.core.domain.metrics";
    "chicken_mud_game" -> "src.core.domain.game_state";
    "chicken_mud_game" -> "game_constants";
    "chicken_mud_game" -> "src";
    "chicken_mud_game" -> "src.core.domain";
    "test_mud_integration" -> "src.core";
    "test_mud_integration" -> "src.core.domain.metrics";
    "test_mud_integration" -> "src.core.domain.game_state";
    "test_mud_integration" -> "game_constants";
    "test_mud_integration" -> "src";
    "test_mud_integration" -> "src.core.domain";
    "test_research_module" -> "src.core.domain";
    "test_research_module" -> "src.core";
    "test_research_module" -> "src.core.domain.metrics";
    "test_research_module" -> "src";
    "test_research_module" -> "src.core.domain.game_state";
    "test_research_module" -> "src.research";
    "test_strategy_debug" -> "src.core";
    "test_strategy_debug" -> "src.core.domain.game_state";
    "test_strategy_debug" -> "src.storyteller";
    "test_strategy_debug" -> "src.cascade.domain";
    "test_strategy_debug" -> "src.cascade.domain.strategies.strategy_factory";
    "test_strategy_debug" -> "src.storyteller.domain.strategy_factory";
    "test_strategy_debug" -> "src";
    "test_strategy_debug" -> "src.core.domain";
    "test_strategy_patterns" -> "src.cascade.domain.models";
    "test_strategy_patterns" -> "src.storyteller";
    "test_strategy_patterns" -> "src.cascade.domain";
    "test_strategy_patterns" -> "src.cascade.domain.strategies.strategy_factory";
    "test_strategy_patterns" -> "src.storyteller.domain.strategy_factory";
    "test_strategy_patterns" -> "src";
    "dev_tools.balance_simulator" -> "src.economy.engine";
    "dev_tools.balance_simulator" -> "src.metrics";
    "dev_tools.balance_simulator" -> "src.economy";
    "dev_tools.balance_simulator" -> "src.events";
    "dev_tools.balance_simulator" -> "src.events.engine";
    "dev_tools.balance_simulator" -> "src.metrics.tracker";
    "dev_tools.balance_simulator" -> "game_constants";
    "dev_tools.balance_simulator" -> "src";
    "dev_tools.event_bank_manager" -> "dev_tools";
    "dev_tools.event_bank_manager" -> "dev_tools.event_validator";
    "dev_tools.event_bank_manager" -> "dev_tools.balance_simulator";
    "dev_tools.event_bank_manager" -> "game_constants";
    "dev_tools.event_bank_manager" -> "dev_tools.config";
    "dev_tools.event_generator" -> "game_constants";
    "dev_tools.event_validator" -> "game_constants";
    "examples.constants_usage_example" -> "core.adapters.excel_constants_provider";
    "scripts.mass_event_generation" -> "dev_tools";
    "scripts.mass_event_generation" -> "dev_tools.event_validator";
    "tests.conftest" -> "src.events.schema";
    "tests.conftest" -> "src.events.validators.base";
    "tests.conftest" -> "src.events";
    "tests.conftest" -> "src";
    "tests.conftest" -> "src.events.validators.specific";
    "tests.test_economy" -> "src.economy.engine";
    "tests.test_economy" -> "src.economy";
    "tests.test_economy" -> "src.economy.models";
    "tests.test_economy" -> "game_constants";
    "tests.test_economy" -> "src";
    "tests.test_events" -> "src.events.schema";
    "tests.test_events" -> "src.metrics";
    "tests.test_events" -> "src.events.models";
    "tests.test_events" -> "src.events";
    "tests.test_events" -> "src.events.engine";
    "tests.test_events" -> "src.metrics.tracker";
    "tests.test_events" -> "src.events.integration";
    "tests.test_events" -> "game_constants";
    "tests.test_events" -> "src";
    "tests.test_event_generator_validator" -> "dev_tools";
    "tests.test_event_generator_validator" -> "dev_tools.event_validator";
    "tests.test_event_generator_validator" -> "dev_tools.event_bank_indexer";
    "tests.test_event_generator_validator" -> "dev_tools.event_generator";
    "tests.test_event_generator_validator" -> "dev_tools.event_condition_fixer";
    "tests.test_event_tools" -> "dev_tools";
    "tests.test_event_tools" -> "dev_tools.event_condition_fixer";
    "tests.test_event_tools" -> "dev_tools.event_bank_indexer";
    "tests.test_metrics" -> "src";
    "tests.test_metrics" -> "src.metrics.tracker";
    "tests.test_metrics" -> "game_constants";
    "tests.test_metrics" -> "src.metrics";
    "tests.test_placeholder" -> "game_constants";
    "tests.test_storyteller_edge_cases" -> "src.storyteller.adapters.storyteller_service";
    "tests.test_storyteller_edge_cases" -> "src.storyteller";
    "tests.test_storyteller_edge_cases" -> "src";
    "tests.test_storyteller_edge_cases" -> "src.storyteller.domain.models";
    "tests.test_storyteller_service" -> "src.core.ports.event_port";
    "tests.test_storyteller_service" -> "src.core.ports.container_port";
    "tests.test_storyteller_service" -> "src.core";
    "tests.test_storyteller_service" -> "src.core.domain.events";
    "tests.test_storyteller_service" -> "src.storyteller.adapters.storyteller_service";
    "tests.test_storyteller_service" -> "src.storyteller";
    "tests.test_storyteller_service" -> "src.core.ports";
    "tests.test_storyteller_service" -> "game_constants";
    "tests.test_storyteller_service" -> "src";
    "tests.test_storyteller_service" -> "src.core.domain";
    "tests.test_storyteller_service" -> "src.storyteller.domain.models";
    "tests.test_tradeoff_example" -> "game_constants";
    "web_prototype.main" -> "src.core.domain";
    "web_prototype.main" -> "src.core";
    "web_prototype.main" -> "src.core.domain.metrics";
    "web_prototype.main" -> "game_constants";
    "web_prototype.main" -> "src";
    "web_prototype.main" -> "src.core.domain.game_state";
    "tests.cascade.test_adapters" -> "src.cascade.ports.event_port";
    "tests.cascade.test_adapters" -> "src.cascade.adapters.cascade_service";
    "tests.cascade.test_adapters" -> "src.cascade.domain.models";
    "tests.cascade.test_adapters" -> "src.cascade.ports";
    "tests.cascade.test_adapters" -> "src.cascade.domain";
    "tests.cascade.test_adapters" -> "game_constants";
    "tests.cascade.test_adapters" -> "src";
    "tests.cascade.test_adapters" -> "src.cascade.adapters";
    "tests.cascade.test_domain" -> "src.cascade.domain.models";
    "tests.cascade.test_domain" -> "src.cascade.domain";
    "tests.cascade.test_domain" -> "game_constants";
    "tests.cascade.test_domain" -> "src";
    "tests.core.domain.cascade.test_models" -> "src.core.domain";
    "tests.core.domain.cascade.test_models" -> "src.core.domain.cascade";
    "tests.core.domain.cascade.test_models" -> "src.core";
    "tests.core.domain.cascade.test_models" -> "game_constants";
    "tests.core.domain.cascade.test_models" -> "src";
    "tests.core.domain.cascade.test_models" -> "src.core.domain.game_state";
    "tests.core.domain.cascade.test_models" -> "src.core.domain.events";
    "tests.adapters.services.test_cascade_service" -> "src.core.ports.event_port";
    "tests.adapters.services.test_cascade_service" -> "src.core.domain.cascade";
    "tests.adapters.services.test_cascade_service" -> "src.core.domain";
    "tests.adapters.services.test_cascade_service" -> "src.adapters.services";
    "tests.adapters.services.test_cascade_service" -> "src.core";
    "tests.adapters.services.test_cascade_service" -> "src.adapters.services.cascade_service";
    "tests.adapters.services.test_cascade_service" -> "src.adapters";
    "tests.adapters.services.test_cascade_service" -> "src.core.ports";
    "tests.adapters.services.test_cascade_service" -> "game_constants";
    "tests.adapters.services.test_cascade_service" -> "src";
    "tests.adapters.services.test_cascade_service" -> "src.core.domain.game_state";
    "tests.adapters.services.test_cascade_service" -> "src.core.domain.events";
    "src.economy.engine" -> "src.economy";
    "src.economy.engine" -> "src";
    "src.economy.engine" -> "game_constants";
    "src.economy.engine" -> "src.economy.models";
    "src.economy.models" -> "game_constants";
    "src.events.constants" -> "game_constants";
    "src.events.engine" -> "src.events.schema";
    "src.events.engine" -> "src.metrics";
    "src.events.engine" -> "src.events.models";
    "src.events.engine" -> "src.events";
    "src.events.engine" -> "src.metrics.tracker";
    "src.events.engine" -> "game_constants";
    "src.events.engine" -> "src";
    "src.events.integration" -> "src.metrics";
    "src.events.integration" -> "src.events.models";
    "src.events.integration" -> "src.events";
    "src.events.integration" -> "src.events.engine";
    "src.events.integration" -> "src.metrics.tracker";
    "src.events.integration" -> "game_constants";
    "src.events.integration" -> "src";
    "src.events.models" -> "game_constants";
    "src.events" -> "src.events.schema";
    "src.events" -> "src.events.models";
    "src.events" -> "src.events";
    "src.events" -> "src.events.engine";
    "src.events" -> "src.events.integration";
    "src.events" -> "src";
    "src.metrics.modifiers" -> "game_constants";
    "src.metrics.tracker" -> "src";
    "src.metrics.tracker" -> "game_constants";
    "src.metrics.tracker" -> "src.metrics.modifiers";
    "src.metrics.tracker" -> "src.metrics";
    "src.storyteller.adapters.storyteller_service" -> "src.core.ports.event_port";
    "src.storyteller.adapters.storyteller_service" -> "src.core.ports.container_port";
    "src.storyteller.adapters.storyteller_service" -> "src.core";
    "src.storyteller.adapters.storyteller_service" -> "src.core.domain.game_state";
    "src.storyteller.adapters.storyteller_service" -> "src.storyteller";
    "src.storyteller.adapters.storyteller_service" -> "src.core.ports";
    "src.storyteller.adapters.storyteller_service" -> "game_constants";
    "src.storyteller.adapters.storyteller_service" -> "src.storyteller.ports.storyteller_port";
    "src.storyteller.adapters.storyteller_service" -> "src.storyteller.domain.strategy_factory";
    "src.storyteller.adapters.storyteller_service" -> "src";
    "src.storyteller.adapters.storyteller_service" -> "src.core.domain";
    "src.storyteller.adapters.storyteller_service" -> "src.storyteller.domain.models";
    "src.storyteller.domain.strategies" -> "src.storyteller";
    "src.storyteller.domain.strategies" -> "game_constants";
    "src.storyteller.domain.strategies" -> "src";
    "src.storyteller.domain.strategies" -> "src.storyteller.domain.models";
    "src.storyteller.domain.strategy_factory" -> "src.storyteller.domain.strategies";
    "src.storyteller.domain.strategy_factory" -> "src";
    "src.storyteller.domain.strategy_factory" -> "src.storyteller";
    "src.storyteller.ports.storyteller_port" -> "src";
    "src.storyteller.ports.storyteller_port" -> "src.storyteller";
    "src.storyteller.ports.storyteller_port" -> "src.storyteller.domain.models";
    "src.core.adapters.container_service" -> "src.core";
    "src.core.adapters.container_service" -> "src";
    "src.core.adapters.container_service" -> "src.core.ports.container_port";
    "src.core.adapters.container_service" -> "src.core.ports";
    "src.cascade.adapters.cascade_service" -> "src.cascade.ports.event_port";
    "src.cascade.adapters.cascade_service" -> "src.cascade.domain.models";
    "src.cascade.adapters.cascade_service" -> "src.cascade.ports";
    "src.cascade.adapters.cascade_service" -> "src.cascade.ports.cascade_port";
    "src.cascade.adapters.cascade_service" -> "src.cascade.domain";
    "src.cascade.adapters.cascade_service" -> "game_constants";
    "src.cascade.adapters.cascade_service" -> "src.cascade.domain.strategies.strategy_factory";
    "src.cascade.adapters.cascade_service" -> "src";
    "src.cascade.adapters.event_adapter" -> "src.cascade.ports.event_port";
    "src.cascade.adapters.event_adapter" -> "src.cascade.ports";
    "src.cascade.adapters.event_adapter" -> "src";
    "src.cascade.adapters" -> "src.cascade.adapters.cascade_service";
    "src.cascade.adapters" -> "src.cascade.adapters.event_adapter";
    "src.cascade.adapters" -> "src";
    "src.cascade.adapters" -> "src.cascade.adapters";
    "src.cascade.domain" -> "src.cascade.domain";
    "src.cascade.domain" -> "src";
    "src.cascade.domain" -> "src.cascade.domain.models";
    "src.cascade.ports.cascade_port" -> "src.cascade.domain";
    "src.cascade.ports.cascade_port" -> "src";
    "src.cascade.ports.cascade_port" -> "src.cascade.domain.models";
    "src.cascade.ports" -> "src.cascade.ports.event_port";
    "src.cascade.ports" -> "src.cascade.ports";
    "src.cascade.ports" -> "src.cascade.ports.cascade_port";
    "src.cascade.ports" -> "src";
    "src.cascade.domain.strategies.cascade_strategy" -> "src.core";
    "src.cascade.domain.strategies.cascade_strategy" -> "src.core.domain.cascade";
    "src.cascade.domain.strategies.cascade_strategy" -> "src.core.domain";
    "src.cascade.domain.strategies.cascade_strategy" -> "src";
    "src.cascade.domain.strategies.cultural_cascade_strategy" -> "src.core.domain";
    "src.cascade.domain.strategies.cultural_cascade_strategy" -> "src.core.domain.cascade";
    "src.cascade.domain.strategies.cultural_cascade_strategy" -> "src.core";
    "src.cascade.domain.strategies.cultural_cascade_strategy" -> "src.cascade.domain";
    "src.cascade.domain.strategies.cultural_cascade_strategy" -> "src.cascade.domain.strategies.cascade_strategy";
    "src.cascade.domain.strategies.cultural_cascade_strategy" -> "src";
    "src.cascade.domain.strategies.economic_cascade_strategy" -> "src.core.domain";
    "src.cascade.domain.strategies.economic_cascade_strategy" -> "src.core.domain.cascade";
    "src.cascade.domain.strategies.economic_cascade_strategy" -> "src.core";
    "src.cascade.domain.strategies.economic_cascade_strategy" -> "src.cascade.domain";
    "src.cascade.domain.strategies.economic_cascade_strategy" -> "game_constants";
    "src.cascade.domain.strategies.economic_cascade_strategy" -> "src.cascade.domain.strategies.cascade_strategy";
    "src.cascade.domain.strategies.economic_cascade_strategy" -> "src";
    "src.cascade.domain.strategies.environmental_cascade_strategy" -> "src.core.domain";
    "src.cascade.domain.strategies.environmental_cascade_strategy" -> "src.core.domain.cascade";
    "src.cascade.domain.strategies.environmental_cascade_strategy" -> "src.core";
    "src.cascade.domain.strategies.environmental_cascade_strategy" -> "src.cascade.domain";
    "src.cascade.domain.strategies.environmental_cascade_strategy" -> "src.cascade.domain.strategies.cascade_strategy";
    "src.cascade.domain.strategies.environmental_cascade_strategy" -> "src";
    "src.cascade.domain.strategies.social_cascade_strategy" -> "src.core.domain";
    "src.cascade.domain.strategies.social_cascade_strategy" -> "src.core.domain.cascade";
    "src.cascade.domain.strategies.social_cascade_strategy" -> "src.core";
    "src.cascade.domain.strategies.social_cascade_strategy" -> "src.cascade.domain";
    "src.cascade.domain.strategies.social_cascade_strategy" -> "src.cascade.domain.strategies.cascade_strategy";
    "src.cascade.domain.strategies.social_cascade_strategy" -> "src";
    "src.cascade.domain.strategies.strategy_factory" -> "src.cascade.domain.models";
    "src.cascade.domain.strategies.strategy_factory" -> "src.cascade.domain.strategies.cascade_strategy";
    "src.cascade.domain.strategies.strategy_factory" -> "src.cascade.domain";
    "src.cascade.domain.strategies.strategy_factory" -> "src.cascade.domain.strategies.technological_cascade_strategy";
    "src.cascade.domain.strategies.strategy_factory" -> "src.cascade.domain.strategies.environmental_cascade_strategy";
    "src.cascade.domain.strategies.strategy_factory" -> "src.cascade.domain.strategies.cultural_cascade_strategy";
    "src.cascade.domain.strategies.strategy_factory" -> "src.cascade.domain.strategies.social_cascade_strategy";
    "src.cascade.domain.strategies.strategy_factory" -> "src";
    "src.cascade.domain.strategies.strategy_factory" -> "src.cascade.domain.strategies.economic_cascade_strategy";
    "src.cascade.domain.strategies.technological_cascade_strategy" -> "src.core.domain";
    "src.cascade.domain.strategies.technological_cascade_strategy" -> "src.core.domain.cascade";
    "src.cascade.domain.strategies.technological_cascade_strategy" -> "src.core";
    "src.cascade.domain.strategies.technological_cascade_strategy" -> "src.cascade.domain";
    "src.cascade.domain.strategies.technological_cascade_strategy" -> "src.cascade.domain.strategies.cascade_strategy";
    "src.cascade.domain.strategies.technological_cascade_strategy" -> "src";
    "core.adapters.excel_constants_provider" -> "backend.app.core.domain.interfaces";
    "core.adapters.excel_constants_provider" -> "backend.app.core.domain.interfaces.data_provider";
    "backend.app.core.domain.event_system" -> "game_constants";
    "backend.app.core.domain.variable_registry" -> "game_constants";
}